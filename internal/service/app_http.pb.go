// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.0

package service

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AppHTTPServer interface {
	GetBanner(context.Context, *IdRequest) (*Banner, error)
	GetProduct(context.Context, *IdRequest) (*Product, error)
	GetProductByCategory(context.Context, *IdRequest) (*Product, error)
	GetTheme(context.Context, *IdRequest) (*Theme, error)
	GetThemes(context.Context, *emptypb.Empty) (*Themes, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/banner/{id}", _App_GetBanner0_HTTP_Handler(srv))
	r.GET("/theme/{id}", _App_GetTheme0_HTTP_Handler(srv))
	r.GET("/themes", _App_GetThemes0_HTTP_Handler(srv))
	r.GET("/product/{id}", _App_GetProduct0_HTTP_Handler(srv))
	r.GET("/product/by_category/{id}", _App_GetProductByCategory0_HTTP_Handler(srv))
}

func _App_GetBanner0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/service.App/GetBanner")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBanner(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Banner)
		return ctx.Result(200, reply)
	}
}

func _App_GetTheme0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/service.App/GetTheme")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTheme(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Theme)
		return ctx.Result(200, reply)
	}
}

func _App_GetThemes0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/service.App/GetThemes")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetThemes(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Themes)
		return ctx.Result(200, reply)
	}
}

func _App_GetProduct0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/service.App/GetProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Product)
		return ctx.Result(200, reply)
	}
}

func _App_GetProductByCategory0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/service.App/GetProductByCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProductByCategory(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Product)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	GetBanner(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *Banner, err error)
	GetProduct(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *Product, err error)
	GetProductByCategory(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *Product, err error)
	GetTheme(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *Theme, err error)
	GetThemes(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *Themes, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) GetBanner(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*Banner, error) {
	var out Banner
	pattern := "/banner/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/service.App/GetBanner"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetProduct(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*Product, error) {
	var out Product
	pattern := "/product/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/service.App/GetProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetProductByCategory(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*Product, error) {
	var out Product
	pattern := "/product/by_category/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/service.App/GetProductByCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetTheme(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*Theme, error) {
	var out Theme
	pattern := "/theme/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/service.App/GetTheme"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetThemes(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*Themes, error) {
	var out Themes
	pattern := "/themes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/service.App/GetThemes"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
